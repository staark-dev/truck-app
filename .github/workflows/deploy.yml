name: 🚀 Deploy PWA to GitHub Pages

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  LIGHTHOUSE_CI_BUILD_PATH: './dist'

jobs:
  build-and-validate:
    name: 🔨 Build and Validate
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # ===== Node.js cu fallback =====
      - name: 📦 Setup Node.js (try 20.x)
        id: node20
        uses: actions/setup-node@v4
        continue-on-error: true
        with:
          node-version: '20.x'
          check-latest: true
          cache: 'npm'

      - name: 📦 Fallback to Node.js 18.x
        id: node18
        if: steps.node20.outcome != 'success'
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          check-latest: true
          cache: 'npm'

      - name: 🔎 Node version
        run: |
          echo "Using Node:" $(node -v || echo "not found")
          echo "NPM:" $(npm -v || echo "not found")

      - name: 📋 Install CLI tools
        run: npm i -g uglify-js clean-css-cli

      - name: 🔍 Validate required PWA files
        run: |
          req=("index.html" "manifest.json" "sw.js" "app.js")
          for f in "${req[@]}"; do
            [[ -f "$f" ]] || { echo "❌ Missing $f"; exit 1; }
            echo "✅ $f"
          done
          [[ -f icons/icon-192x192.png ]] || { echo "❌ Missing icons/icon-192x192.png"; exit 1; }
          [[ -f icons/icon-512x512.png ]] || { echo "❌ Missing icons/icon-512x512.png"; exit 1; }
          echo "✅ icons OK"

      - name: ✅ Validate manifest.json
        run: |
          node -e "JSON.parse(require('fs').readFileSync('manifest.json','utf8'))"
          (grep -q '"name"' manifest.json && grep -q '"short_name"' manifest.json && grep -q '"start_url"' manifest.json) \
            || { echo "❌ Required fields missing in manifest.json"; exit 1; }
          echo "✅ manifest.json OK"

      - name: 🗜️ Build (minify)
        run: |
          mkdir -p dist
          rsync -a --exclude 'dist' ./ dist/
          cd dist
          # Minify JS (evită .min.js deja minificate)
          for js in *.js js/*.js 2>/dev/null; do
            [[ -f "$js" ]] || continue
            [[ "$js" == *.min.js ]] && continue
            echo "Minifying $js"
            npx uglify-js "$js" -c -m -o "${js%.js}.min.js"
            sed -i "s|$js|${js%.js}.min.js|g" index.html || true
          done

      - name: 🧪 Test Service Worker syntax
        run: |
          node -e "new Function(require('fs').readFileSync('sw.js','utf8')); console.log('✅ SW syntax ok')"

      - name: 📦 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: pwa-build
          path: dist/
          retention-days: 30

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-validate
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript

  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-and-validate, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: ./dist
      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v5
      - name: 📁 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: 🔍 Post-deployment health check
        run: |
          URL="${{ steps.deployment.outputs.page_url }}"
          echo "Check: $URL"
          curl -fsS "$URL" >/dev/null && echo "✅ Site ok" || { echo "❌ Site down"; exit 1; }
          curl -fsS "${URL}manifest.json" >/dev/null && echo "✅ Manifest ok" || echo "❌ Manifest missing"
          curl -fsS "${URL}sw.js" >/dev/null && echo "✅ SW ok" || echo "❌ SW missing"

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: ✅ Success
        if: needs.deploy.result == 'success'
        run: echo "🎉 PWA deployed!"
      - name: ❌ Failure
        if: needs.deploy.result != 'success'
        run: |
          echo "❌ Deployment failed"
          exit 1