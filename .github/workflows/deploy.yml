name: 🚀 Deploy PWA to GitHub Pages

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_DIR: ./dist

# Funcție reutilizabilă: asigură Node (preinstalat sau prin nvm)
defaults:
  run:
    shell: bash

jobs:
  build-and-validate:
    name: 🔨 Build and Validate
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Ensure Node.js (preinstalled or nvm 18.x)
        run: |
          if command -v node >/dev/null 2>&1; then
            echo "✅ Using preinstalled Node $(node -v)"
          else
            echo "⬇️ Installing Node via nvm (18.x)…"
            export NVM_DIR="$HOME/.nvm"
            # dacă nvm nu e prezent pe runner, îl instalăm
            if [ ! -s "$NVM_DIR/nvm.sh" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            source "$NVM_DIR/nvm.sh"
            nvm install 18
            nvm use 18
            echo "✅ Node $(node -v) / npm $(npm -v)"
          fi

      - name: 📋 Install CLI tools
        run: npm i -g uglify-js clean-css-cli

      - name: 🔍 Validate required PWA files
        run: |
          req=("index.html" "manifest.json" "sw.js" "app.js")
          for f in "${req[@]}"; do
            [[ -f "$f" ]] || { echo "❌ Missing $f"; exit 1; }
            echo "✅ $f"
          done
          [[ -f icons/icon-192x192.png ]] || { echo "❌ Missing icons/icon-192x192.png"; exit 1; }
          [[ -f icons/icon-512x512.png ]] || { echo "❌ Missing icons/icon-512x512.png"; exit 1; }
          echo "✅ icons OK"

      - name: ✅ Validate manifest.json
        run: |
          node -e "JSON.parse(require('fs').readFileSync('manifest.json','utf8'))"
          (grep -q '"name"' manifest.json && grep -q '"short_name"' manifest.json && grep -q '"start_url"' manifest.json) \
            || { echo "❌ Required fields missing in manifest.json"; exit 1; }
          echo "✅ manifest.json OK"

      - name: 🗜️ Build (minify)
        run: |
          rm -rf "$BUILD_DIR"
          mkdir -p "$BUILD_DIR"
          rsync -a --exclude 'dist' ./ "$BUILD_DIR"/
          cd "$BUILD_DIR"
          # Minify JS (nu atinge fișierele .min.js)
          shopt -s nullglob
          for js in *.js js/*.js; do
            [[ -f "$js" ]] || continue
            [[ "$js" == *.min.js ]] && continue
            echo "Minifying $js"
            npx uglify-js "$js" -c -m -o "${js%.js}.min.js"
            sed -i "s|$js|${js%.js}.min.js|g" index.html || true
          done

      - name: 🧪 Test Service Worker syntax
        run: |
          node -e "new Function(require('fs').readFileSync('sw.js','utf8')); console.log('✅ SW syntax ok')"

      - name: 📦 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: pwa-build
          path: ${{ env.BUILD_DIR }}/
          retention-days: 30

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-validate
    steps:
      - uses: actions/checkout@v4
      - name: 🔒 Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/javascript

  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build-and-validate, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: ./dist

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v5

      - name: 📁 Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🔍 Post-deployment health check
        run: |
          URL="${{ steps.deployment.outputs.page_url }}"
          echo "Checking $URL"
          curl -fsS "$URL" >/dev/null && echo "✅ Site OK" || { echo "❌ Site down"; exit 1; }
          curl -fsS "${URL}manifest.json" >/dev/null && echo "✅ Manifest OK" || echo "❌ Manifest missing"
          curl -fsS "${URL}sw.js" >/dev/null && echo "✅ Service Worker OK" || echo "❌ SW missing"

  post-deploy-audit:
    name: 🔍 Post-Deployment Audit
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: 🔧 Ensure Node.js (preinstalled or nvm 18.x)
        run: |
          if command -v node >/dev/null 2>&1; then
            echo "✅ Using Node $(node -v)"
          else
            export NVM_DIR="$HOME/.nvm"
            if [ ! -s "$NVM_DIR/nvm.sh" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
            fi
            source "$NVM_DIR/nvm.sh"
            nvm install 18
            nvm use 18
          fi
          npm i -g @lhci/cli

      - name: 🔍 Run production Lighthouse audit
        run: |
          URL="${{ needs.deploy.outputs.page_url }}"
          echo "Auditing $URL"
          # așteaptă propagarea
          sleep 30
          lhci collect --url="$URL" --numberOfRuns=2 --additive
          lhci upload --target=filesystem --outputDir=./lighthouse-reports

      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-lighthouse-results
          path: ./lighthouse-reports/
          retention-days: 30

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-audit]
    if: always()
    steps:
      - name: ✅ Success
        if: needs.deploy.result == 'success'
        run: echo "🎉 PWA deployed successfully!"
      - name: ❌ Failure
        if: needs.deploy.result != 'success'
        run: |
          echo "❌ Deployment failed — check logs."
          exit 1